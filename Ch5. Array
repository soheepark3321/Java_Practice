처음부터 멋진걸 하려 하지 말고, 가장 단순하고 쉬운것부터 시작하자.
쉬운 코드부터 짜고 계속 효율적인 코드로 개선하려고 답안을 여러개 작성하자.
생각 우선 정리하고, 그 후에 코드를 표현하자.
처음부터 반복문으로 사용하려 하지 말고, 점차 개선하면서 반복문을 사용하는 쪽으로.
무조건 그림을 그리고 이해한 다음 코드 구성도 생각하기.

어떤 키워드를 쓸지, 코드를 어떻게 구성해야 할 지 생각하기.
(어떨 때 while문을 쓰는것이 좋은지 등)

1.
int[] score = new int[10];
		
		for(int i=1; i<=9; i++) {
			score[i] = i-1;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 0 
2 1 
3 2 
4 3 
5 4 
6 5 
7 6 
8 7 
9 8 

2.
int[] score = new int[10];
		
		for(int i=1; i<=9; i++) {
			score[i] = i*2;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 2 
2 4 
3 6 
4 8 
5 10 
6 12 
7 14 
8 16 
9 18

3.
int[] score = new int[10];
		
		for(int i=1; i<=9; i++) {
			score[i] = (i-1)*2;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 0 
2 2 
3 4 
4 6 
5 8 
6 10 
7 12 
8 14 
9 16 

4.
int[] score = new int[10];
		
		for(int i=1; i<=9; i++) {
			score[i] = (i*2)-1;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 1 
2 3 
3 5 
4 7 
5 9 
6 11 
7 13 
8 15 
9 17 

5.
int[] score = new int[10];
		
		for(int i=1; i<=9; i++) {
			score[i] = i*i;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 1 
2 4 
3 9 
4 16 
5 25 
6 36 
7 49 
8 64 
9 81 

6.
//1)
int[] score = new int[10]; 
		
		for(int i=1; i<=9; i++) {
			score[i] = score.length - i;
			System.out.printf("%d %d %n", i, score[i]);
//2)
int[] score = new int[10]; //6
		
		for(int i=1; i<=9; i++) {
			score[i] = 10-i;
			System.out.printf("%d %d %n", i, score[i]);
		}


result)
1 9 
2 8 
3 7 
4 6 
5 5 
6 4 
7 3 
8 2 
9 1 

7.
int[] score = new int[10]; //6
		
		for(int i=1; i<=9; i++) {
			score[i] = (i+2)/3;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)
1 1 
2 1 
3 1 
4 2 
5 2 
6 2 
7 3 
8 3 
9 3 

**8.
int[] score = new int[10]; //6
		
		for(int i=1; i<=9; i++) {
			score[i] = ;
			System.out.printf("%d %d %n", i, score[i]);
		}

result)

123123123
---------------------------------------------------------
1.
두 배열 arr, arr2가 같은지 (동등비교) 확인해서 같으면 "같습니다", 다르면 "다릅니다"를 출력하시오.
int[] arr = {1,2,3}
int[] arr2 = {1,2,3}

answer)
int[] arr = {1,2,3};
		int[] arr2 = {1,2,3};
		
		int cnt = 0;
		
		for(int i=0; i<=2; i++) { //i=0,1,2
			if(arr[i] == arr2[i]) cnt++; //count
		}
		
		if(cnt==3) {
			System.out.println("같음 ");
		} else {
			System.out.println("다름 ");
		}

answer1)
package CH02_Variable;
import java.util.*;

public class ex2_4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {1,2,3};
		int[] arr2 = {1,2,3};
		
		if(arr[0] == arr2[0]) cnt++;
		if(arr[1] == arr2[1]) cnt++;
		if(arr[2] == arr2[2]) cnt++;
		
		if(cnt==3) {
			System.out.println("같음 ");
		} else {
			System.out.println("다름 ");
		}
	}

}

answer)
int[] arr = {1,2,3};
		int[] arr2 = {1,2,3};
		
		int cnt = 0;
		boolean eq = true;
		
		for(int i=0; i<=2; i++) { //i=0,1,2
			if(arr[i] != arr2[i]) {
				eq=false;
				break;
			}
		}
		
		if(eq==true) {
			System.out.println("같음 ");
		} else {
			System.out.println("다름 ");
		}

answer)
int[] arr = {1,2,3}; 
		int[] arr2 = {1,2,3};
		
		if(Arrays.equals(arr, arr2)) {
			System.out.println("같습니다");
		} else {
			System.out.println("다릅니다");
		}
result)
같습니다

**2.
두 배열의 값을 비교해서 같은 값의 개수를 출력하시오.
단, 값의 위치(index)도 같으면 그 개수를 출력하시오.
int[] arr = {1,2,3}
int[] arr2 = {1,2,3}

answer)
int[] arr = {1,2,3}; //총 9번 비교해야 함. arr[0]->arr2[0], arr2[1], arr2[2]와 각각 비교해야함 
		int[] arr2 = {1,2,3};
		
		int s = 0; //값이 같고 위치도 같은 경우 
		int b = 0; // 값이 같고 위치가 다른 경우 
		
		if(arr[0]==arr2[0]) s++; // s. 위치도 일치 
		if(arr[0]==arr2[1]) b++;
		if(arr[0]==arr2[2]) b++;
		if(arr[1]==arr2[0]) b++;
		if(arr[1]==arr2[1]) s++; // s.
		if(arr[1]==arr2[2]) b++;
		if(arr[2]==arr2[0]) b++;
		if(arr[2]==arr2[1]) b++;
		if(arr[2]==arr2[2]) s++; // s.
		
		System.out.printf("%dS %dB%n", s, b);

answer)
int[] arr = {1,2,3}; //총 9번 비교해야 함. arr[0]->arr2[0], arr2[1], arr2[2]와 각각 비교해야함 
		int[] arr2 = {1,2,3};
		
		int s = 0; //값이 같고 위치도 같은 경우 
		int b = 0; // 값이 같고 위치가 다른 경우 
		
		for(int i=0; i<=2; i++) {
			for(int j=0; j<=2; j++) {
				if(arr[i]==arr2[j]) {
					if(i==j)
						s++;
					else
						b++;
				}
			}
		}
		
		System.out.printf("%dS %dB%n", s, b);

**3.
int[] arr = {4,2,2,4,1,7,3,2,5,1,3};
배열 arr가 위와 같을 때,
1. 중복 제거 / 2. 정렬 -> 결과를 출력하시오.
(배열 1개와 for문 1개만 사용)

answer)
int[] arr = {4,2,2,4,1,7,3,2,5,1,3};
		int[] cntArr = new int[10]; //0~9
		
		//카운팅 
		for(int i=0; i<arr.length; i++) {
			cntArr[arr[i]]++; //이해가 안되면 실제로 값을 대입하여 확인하기.
		}
		
		for(int i=0; i<cntArr.length; i++) {
			System.out.printf("cntArr[%d]=%d%n", i, cntArr[i]);
		}
		
		//카운팅 후 1. 중복제거 2. 정렬
		//중복제거 : 1,2,4,5의 값을 얻어내기 위함.

answer 1. 중복 제거)


answer 2. 정렬)
-1.

-2. (x)


result) 
[1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 7]

**4.
1차원 배열 arr = {1 ~ 12}의 값들을 2차원 배열 (4행 3열) arr2에 복사하여 출력하시오.
