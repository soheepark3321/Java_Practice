1. 두 변수 값 교환
(변수 tmp 이용)

int x = 10, y = 20;
int tmp = 0; //변수 초기화

tmp = x;
x = y;
y = tmp;

System.out.println("x : " + x + "y : " + y);

>결과
x : 20 y : 10
------------------------------------------------------------------------------------------------------------
2. 변수의 명명규칙
-대소문자 구분 o, 길이 제한 x
-예약어 사용 x
-숫자로 시작 x
-허용 특수문자 : _ $

-클래스 이름 첫 글자 : 대문자
-여러 단어 조합 이름 -> 단어 첫 글자마다 대문자 (ex. StringBuffer)
-상수 이름 대문자, 여러 단어 조합 경우 '_'로 구분 (ex. PI, MAX_NUMBER)
------------------------------------------------------------------------------------------------------------
***
강타입언어 : c, c++, java (컴파일러)
타입이 큰 것들 (소스 -> 컴파일 -> 실행)

약타입언어 : js, python (인터프리터)
(소스 -> 실행) 유연하다.
-> 컴파일러가 없으니까 모든게 다 실행됨. 에러가 나면 대충 넘어가는 경우도 많음.

초강타입언어 : "rust" (컴파일러가 하는 일이 굉장히 많아짐) 대신 실행할 때 에러가 훨씬 적음.
프로그램이 효율적으로 돌아감, 성능이 좋아짐.
유연성은 좀 떨어지지만 소스 관리하는 사람 입장에서는 훨씬 안정감있고 편함.

컴파일 : 언어 변한 (사람 작성 소스 -> 기계어)

대부분 언어 : OOP(객체지향) + TP(함수형)

polyglot : 멀티 랭귀지 (기본적으로 4-5개 이상은 해야 : java, python, js, kotlin, scala)

에러 종류)
컴파일에러 : 컴파일 시 발생 에러
런타임에러 : 실행 시 발생 에러 (프로그램을 사용하는 도중에 나오는 에러)
------------------------------------------------------------------------------------------------------------
3. 변수의 타입 - 기본형
논리형(boolean / true, false), 문자형(char), 정수형(byte, shot, int, long), 실수형(float, double)
-> cpu가 가장 효율적으로 처리 가능 타입 : int
-> 효율적 실행 < 메모리 절약 : byte, short

논리형 (boolean) : 1byte
문자형 (char) : 2byte
정수형 (byte) : 1byte, (short) : 2byte, (int) : 4byte, (long) : 8byte
실수형 (float) : 4byte, (double) : 8byte
*1byte = 8bit

char : \u0000\ ~ \uffff (0~2^16-1, 0~65535)
byte : -128 ~ 127
short : -32,768 ~ 32,767
int : -2,147,483,648 ~ 2,127,483,647
long : -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
float : 1.4E-45 ~ 3.4E38 (음수도 동일)
double : 4.9E-324 ~ 1.8E308 (음수도 동일)
------------------------------------------------------------------------------------------------------------
4. 상수와 리터럴
int score = 100;
		score = 200;
		
		System.out.println(score);
-> score에 100 저장 후 200을 다시 지정하여 저장해주면 앞서 100이 사라지고 200이 score의 값이 된다.
만약 max에 상수인 100을 고정시키게끔 선언하고 싶으면 선언문 앞에 final을 붙이면 됨

final int MAX = 100;
		
		System.out.println(MAX);
-> 위의 경우처럼 코드 밑에 MAX = 200;을 적고 실행하면 에러 생김. final이 상수 값을 고정시켜줌.
(상수 이름은 대문자 고정임. 암묵적 룰.)

*리터럴
위의 코드에서 변수는 score, 리터럴(그 자체로 값 의미)은 100, 200
여기서 MAX는 상수, 즉 한 번만 값을 저장 가능한 변수 (final 때문)

*리터럴 접미사
정수형 : L (롱타입)
실수형 : f(float 타입), d(double 타입)
-> double은 생략 가능

*double과 float의 차이
float는 7자리까지 표현 가능, double 15-16자리까지 표현 가능
float의 정밀도보다 더 높은 정밀도가 필요하면 double을 사용하면 됨.

float pi = 3.14;
이렇게 코드를 작성하면 3.14가 float 범위에 들어가더라도 f 접미사를 붙이지 않아서 double로 간주하기 때문에 앞에 float 선언이 말짱도루묵됨. 그래서 에러남.
float pi = 3.14f;가 맞는 표현임.

덧셈 연산 : 문자열 + any type = 문자열
-> 문자열이 아닌 경우, 문자열로 변환시키고 더한다.
-> (ex. 7) 기본형 타입 값을 문자열로 변환할 때는 빈 문자열("")을 더해주면 됨

*printf : 형식 변환 출력 가능 (ex. 정수를 8진수로 출력), 출력 후 줄바꿈 x
-> println은 값 입력한 그대로만 출력 가능

System.out.printf("age:%d", 14);
-> 정수형 변수 저장 값을 10진 정수로 출력할 때는 지시자 '%d' 사용

System.out.printf("age:%d year:%d", 14, 2023);
-> 지시자를 여러 개 사용해야 할 때, 순서에 일치하도록 쓰면 됨.

System.out.printf("age:%d%nyear:%d", 14, 2023);
-> printf는 줄바꿈이 안되므로 %n을 이용하여 줄바꿈 실행

지시자
%b : boolean 형식 출력
%d : decimal (10진) 정수 형식 출력
%o : octal (8진) 정수 출력
%x, %X : hexa-decimal (16진) 정수 출력
%f : floating-point (부동 소수점) 형식 출력
%e, %E : exponent (지수) 표현식 형식 출력
%c : character 출력
%s : string 출력

	byte b = 1;
	short s = 2;
	char c = 'A';
	
	int finger = 10;
	long big = 100_000_000_000L;
	long hex = 0xFFFF_FFFF_FFFF_FFFFL;
	
	int octNum = 010;
	int hexNum = 0x10;
	int binNum = 0b10;
	
	System.out.printf("b=%d%n", b);
	System.out.printf("s=%d%n", s);
	System.out.printf("c=%c, %d %n", c, (int)c);
	System.out.printf("finger=[%5d]%n", finger);
	System.out.printf("finger=[%-5d]%n", finger);
	System.out.printf("finger=[%05d]%n", finger);
	System.out.printf("big=%d%n", big);
	System.out.printf("hex=%#x%n", hex);
	System.out.printf("octNum=%o, %d%n", octNum, octNum);
	System.out.printf("hexNum=%x, %d%n", hexNum, hexNum);
	System.out.printf("binNum=%s, %d%n", Integer.toBinaryString(binNum), binNum);

