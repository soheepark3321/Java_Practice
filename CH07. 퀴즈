1.
세 개의 정수 x, y, z를 받아서 중간크기의 값을 반환하는 mid라는 메서드 작성

mid(1,2,3)==2
mid(1,1,1)==1
mid(1,2,2)==2

---
package practice;
import java.util.*;
import static org.junit.Assert.*;

public class exjava {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int mid(int x, int y, int z) {
if((x<=y && y<=z) || (z<=y && y<=x)) return y;
if((y<=x && x<=z) || (z<=x && x<=y)) return x;
returnz;
		}
		
		@Test
		public void test() {
			assertTrue(mind(1,2,3)==2);
		}
		
		@Test
		public void test1() {
			assertTrue(mind(3,1,2)==2);
		}
		
		@Test
		public void test2() {
			assertTrue(mind(1,2,2)==2);
		}
		
	}

}


2.
5 * 5 이차원 int 배열 받아서, 빙고 갯수를 세어서 반환하는 bingoCount() 메서드를 작성하시오.

----------------
package practice;
import java.util.*;
import static org.junit.Assert.*;

public class exjava {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int bingoCount(int[][] arr) {
			int bingoCount=0;
			
			//코드를 넣어 완성하시오.


			
			return bingoCnt;
		}
		
		int mid(int x, int y, int z) {
			return y;
		}
		
		@Test
		public void test() {
			int[][] arr = {
					{1,1,1,1,1},
					{1,1,1,1,1},
					{1,1,1,1,1},
					{1,1,1,1,1},
					{1,1,1,1,1}
			}
			assertTrue(mind(arr)==12);
		} //이런거 복사를 여러개 해서 코드 만들어야 함.
		
		@Test
		public void test() {
			int[][] arr = {
					{0,0,0,0,0},
					{1,1,1,1,1},
					{1,1,1,1,1},
					{1,1,1,1,1},
					{1,1,1,1,1}
			}
			assertTrue(mind(arr)==4);
		} //이런거 복사를 여러개 해서 코드 만들어야 함.
		

		
	}

}

3.
5장의 카드를 배열로 받아서 등급을 문자열로 반환하는 random check 메서드를 작성하시오.
등급예시)
1. "NO RANK"
2. "1 PAIR" 같은 숫자 한쌍
3. "2 PAIR" 같은 숫자 두쌍
4. "THREE CARD" 같은 카드 3장
5. "FOUR CARD" 같은 카드 4장
6. "STRAIGHT" 연속 숫자 5장 (2,3,4,5,6)
7. "FLUSH" 같은 무늬 5장 
8. "STRAIGHT FLUSH" 같은 무늬면서 연속 숫자
---
import org.junit.Test;

class Card {
	int num;
	String kind;
	
	Card(int num, String kind) {
		this.num = num;
		this.kind = kind;
	}
	
	public String toString() {
		return num + kind;
	}
}

public class StarTest {
	String rankCheck(Card[] cardArr) {
		//카운팅 
		int[] cntArr = new int[14]; //카드가 1~13이니까 (0~13) 
		
		for (int i=0; i<cardArr.length; i++) 
			cntArr[cardArr[i].num]++;
		//STARIGHT
		boolean isStraight = true;
		
		for(int i=0; i<cardArr.length; i++) {
			if(cntArr[i]==1)
				for(int j=1; j<=4; j++) {
					if(cntArr[j] != 1)
						isStraight = false;
				}
		}
		
		//FLUSH
		boolean isFlush = true;
		String kind = cardArr[0].kind;
		
		for(int i=1; i<cardArr.length; i++) {
			if(kind.equals(cardArr[i].kind))
				isFlush = false;
		}
		
		//PAIR, THREE CARD, FOUR CARD
		int pair=0;
		boolean isThreeCard = false;
		boolean isFourCard = false;
		
		for(int i=0; i<cntArr.length; i++) {
			if(cntArr[i]==2) pair++;
			if(cntArr[i]==3) isThreeCard = true;
			if(cntArr[i]==4) isFourCard = true;
		}
		
		//최종결과 반환 
		if(isStraight && isFlush)
			return "STRAIGHT FLUSH";
		if(isFlush) //else if 쓸 필요 없음. 바로 return하고 빠져나가니까.
			return "FLUSH";
		if(isStraight) 
			return "STRAIGHT";
		if(isThreeCard && pair > 0)
			return "FULL HOUSE";
		
		return "NO RANK";
		
		//높은거에서부터 정렬하는건 else를 안써도 된다. 
	}
}
